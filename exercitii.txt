//1. Given an array of objects that have a field called population, sort the objects by population size. Return the sorted array.

// const population = [30000, 500000, 60000,40000, 1000000];
// const compare = (a, b) => a > b ? 1 : 0;
// population.sort(function(a,b){
//   return a-b;
// });
//  console.log(population);


// 2. Write a function that takes two objects as arguments.
// Merge both objects and create another object that has fields from the arguments.
// Return the resulting object
// Ex: For an input {'a': 1, 'b': 2}, {'c': 3, 'd': 4} it should return another object with the properties 'a', 'b', 'c', 'd'.


// var o1 = {
//   a: 1,
//   b: 2
// };
// var o2 = {
//   c: 3,
//   d: 4
// };
// function merge(o1, o2) {
//   let merged;
//   merged = { ...o1, ...o2 };
//   return merged;
// }
// let x;
// x = merge(o1,o2);
// console.log(Object.getOwnPropertyNames(x));



// 3. Write a function that takes an array of strings as argument. Group those strings by their first letter. 
//     Return an object that contains properties with keys representing first letters
//     The values should be arrays of strings containing only the corresponding strings
//     For example, the array ['Alf', 'Alice', 'Ben'] should be transformed to
//     Ex: { a: ['Alf', 'Alice'], b: ['Ben']}


//  const groupIt = (array) => {
//   let resultObj = {};
  
//   for (let i =0; i < array.length; i++) {
//     let currentWord = array[i];
//     let firstChar = currentWord[0].toLowerCase();
//     let innerArr = [];
//     if (resultObj[firstChar] === undefined) {
//        innerArr.push(currentWord);
//       resultObj[firstChar] = innerArr
//     }else {
//       resultObj[firstChar].push(currentWord)
//     }
//   }
//   return resultObj
// }

// console.log(groupIt(['Alf', 'Alice', 'Ben']))


// 4. Create a class called CustomList with these methods:
//     insertFirst(data)
//     insertLast(data)
//     getFirst()
//     getLast()
// Make sure you test the functionality by creating some objects.
// Bonus: Create a class for a LinkedList.


// class Node {
//   constructor(data, next = null) {
//    this.data = data;
//    this.next = next;
//   }
// }class LinkedList {
//   constructor() {
//     this.head = null;
//   }
//   insertFirst(data) {
//     const node = new Node(data, this.head);
//     this.head = node;
//   }
//   insertLast(data) {
//     const last = this.getLast();
//     if (last) {
//      last.next = new Node(data);
//     } else {
//       this.head = new Node(data);
//     }
//    }
  
//   getFirst() {
//     return this.head.data;
//   }
  
//   getLast() {
//     if (!this.head) {
//       return null;
//     }
//     let node = this.head;
//     while (node) {
//      if (!node.next) {
//       return node;
//      }
//      node = node.next;
//     }
//   }

  
//    getAt(index) {
//     let counter = 0;
//     let node = this.head;
//     while (node) {
//      if (counter === index) {
//       return node;
//      }
//      counter++;
//      node = node.next;
//     }
//    return null;
//   }
// }

// const list = new LinkedList();
// list.insertFirst("a");
// list.insertLast("b");
// list.insertLast("c");
// console.log(list.getAt(0))


// 5. An Armstrong number is an n-digit number that is equal to the sum of the nth powers of its digits. 
//     Determine if the input number is an Armstrong number. Return either true or false.
//     Ex: 1^3 + 5^3 + 3^3 = 153


//  let sum = 0;
//  const number = prompt("Alege un numar:  ");
//  const numberOfDigits = number.toString().length;

//  let temp = number;
//  while (temp>0){
//    const last = temp % 10;
//    sum +=  last ** numberOfDigits;
//    temp = parseInt(temp / 10);  
//  }

//  if(sum == number)
// {
//   console.log("True");
// }
// else {
//   console.log("False")
// }

